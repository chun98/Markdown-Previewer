{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Header","Layout","Footer","Content","TextArea","Input","ButtonGroup","Button","Group","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","rawMarkup","value","__html","require","render","state","handleChange","bind","assertThisInitialized","delet","bold","addcode","quote","list","bars","italic","listNum","e","setState","target","prev","split","lastLine","length","join","letter","index","prevState","toString","react_default","a","createElement","layout","style","backgroundColor","id","row","col","span","es_button","icon","onClick","minHeight","autosize","onChange","card","title","dangerouslySetInnerHTML","Component","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.39dbea94.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {Row, Col, Layout, Input, Button, Card} from 'antd'\nimport \"antd/dist/antd.css\";\nimport './App.css'\n\nconst {\n  Header, Footer, Content,\n} = Layout;\n\nconst { TextArea } = Input;\n\nconst ButtonGroup = Button.Group;\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.delet = this.delet.bind(this);\n    this.bold = this.bold.bind(this);\n    this.addcode = this.addcode.bind(this);\n    this.quote = this.quote.bind(this);\n    this.list = this.list.bind(this);\n    this.bars = this.bars.bind(this);\n    this.italic = this.italic.bind(this);\n    this.state = { value: '' , listNum: 0};\n  }\n\n  handleChange(e) {\n    this.setState({ value: e.target.value });\n  }\n\n  delet(e){\n    this.setState({value: ''});\n  }\n\n  italic(e){\n    var prev = this.state.value.split(\"\\n\");\n    var lastLine = prev[prev.length-1].split(\" \")\n    lastLine[lastLine.length-1] = \"`\" + lastLine[lastLine.length-1] + \"`\"\n    prev[prev.length-1] = lastLine.join(\" \")\n    var letter = \"\";\n    for (let index = 0; index < prev.length; index++) {\n      letter += prev[index] + \"\\n\";\n    }\n    this.setState({value: letter});\n  }\n  addcode(){\n    this.setState(prevState => ({\n      value : prevState.value +  \"\\n```\\n```\"\n    }));\n  }\n\n  bold(e){\n    var prev = this.state.value.split(\"\\n\");\n    var lastLine = prev[prev.length-1].split(\" \")\n    lastLine[lastLine.length-1] = \"**\" + lastLine[lastLine.length-1] + \"**\"\n    prev[prev.length-1] = lastLine.join(\" \")\n    var letter = \"\";\n    for (let index = 0; index < prev.length; index++) {\n      letter += prev[index] + \"\\n\";\n    }\n    this.setState({value: letter});\n  }\n\n  quote(){\n    this.setState(prevState => ({\n      value: prevState.value+\"\\n> \"\n    }));\n  }\n\n  bars(){\n    this.setState(prevState => ({\n      value: prevState.value+\"\\n* \"\n    }));\n  }\n\n  list(){\n    this.setState(prevState => ({\n      value: prevState.value+\"\\n\" + (prevState.listNum+1).toString() +\". \" ,\n      listNum: prevState.listNum + 1\n    }));\n  }\n\n  rawMarkup = (value) => {\n    var Remarkable = require('remarkable');\n    var md = new Remarkable('full');\n    return {__html: md.render(this.state.value)};\n  }\n  render() {\n    return (\n      <div>\n        <Layout style={{backgroundColor:\"#ffffff\"}}>\n        <Header>\n          <div id=\"header\">Markdown Preview</div>\n        </Header>\n        <Content>\n        <Row>\n        <Col span={12}>\n          <ButtonGroup>\n            <Button icon=\"bold\" onClick={this.bold}></Button>\n            <Button icon=\"italic\" onClick={this.italic}></Button>\n            <Button icon=\"read\" onClick={this.quote}></Button>\n            <Button icon=\"redo\" onClick={this.delet}></Button>\n            <Button icon=\"bars\" onClick={this.bars}></Button>\n            <Button icon=\"ordered-list\" onClick={this.list}></Button>\n            <Button icon=\"code\" onClick={this.addcode}></Button>\n          </ButtonGroup>\n        </Col>\n        <Col span={12}></Col>\n        </Row>\n        <Row>\n          <Col span={12}>\n            <TextArea\n              style = {{minHeight:555}}\n              autosize = \"true\"\n              onChange={this.handleChange}\n              value = {this.state.value}\n            />\n          </Col>\n          <Col span={12}>\n            <Card title=\"Viewer\" style={{minHeight:555}}>\n              <div dangerouslySetInnerHTML={this.rawMarkup()}></div>\n            </Card>\n          </Col>\n        </Row>\n        </Content>\n            <Footer><div id=\"footer\">Made by CHUN</div></Footer>\n        </Layout>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}